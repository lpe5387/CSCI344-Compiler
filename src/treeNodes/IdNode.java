package treeNodes; /**
 * This class is responsible for the ID node for the parse tree
 *
 * @author Luka Eaton, lucie lim
 */

import java.util.ArrayList;
import provided.JottTree;
import provided.Token;
import provided.TokenType;
import exceptions.SyntaxException;

public class IdNode implements ExprNode {
 
    private Token token;

    public IdNode(Token token){
        this.token = token;
    }

    /**
     * Function used to Parse an id into an treeNodes.IdNode for the parse tree.
     * @param tokenlist the list of tokens generated by the Tokenizer
     * @return treeNodes.IdNode
     * @throws SyntaxException
     */
    public static IdNode parseId(ArrayList<Token> tokenlist) throws SyntaxException {
        if(!tokenlist.isEmpty()) {
            Token token = tokenlist.get(0);
            if (token.getTokenType() == TokenType.ID_KEYWORD) {
                IdNode node = new IdNode(token);
                tokenlist.remove(0);
                return node;
            } else {
                throw new SyntaxException("Expected an ID/Keyword, got " + token.getTokenType(), token.getFilename(), token.getLineNum());
            }
        }
        else throw new SyntaxException("Unexpected end of file");
    }

    public String convertToJott(){
        return this.token.getToken();
    }

    public String convertToJava(String className){return "";}

    public String convertToC(){return "";}

    public String convertToPython(){return "";}
    
    public boolean validateTree(){return true;}

    public Token getToken() {
        return this.token;
    }
}
