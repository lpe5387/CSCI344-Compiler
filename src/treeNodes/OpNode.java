package treeNodes; /**
 * This class is responsible for the operation node for the parse tree
 *
 * @author Luka Eaton Issac Kim
 */

import java.util.ArrayList;
import provided.JottTree;
import provided.Token;
import provided.TokenType;
import exceptions.SyntaxException;

public class OpNode implements JottTree {

    private Token token;

    public OpNode(Token token){
        this.token = token;
    }

    /**
     * Function to parse a relational operator for the parse tree.
     * @param tokenlist the list of tokens generated by the Tokenizer
     * @return treeNodes.OpNode
     * @throws SyntaxException
     */
    public static OpNode parseOp(ArrayList<Token> tokenlist) throws SyntaxException {
        Token token = tokenlist.get(0);
        TokenType tokenType = token.getTokenType();
        if(tokenType == TokenType.REL_OP || tokenType == TokenType.MATH_OP){
            OpNode node = new OpNode(token);
            tokenlist.remove(0); 
            return node;
        }
        else{
            throw new SyntaxException("Expected a Relational Operator, got "+ token.getToken(), token.getFilename(), token.getLineNum());
        }
    }

    public String convertToJott(){return "";}

    public String convertToJava(String className){return "";}

    public String convertToC(){return "";}

    public String convertToPython(){return "";}
    
    public boolean validateTree(){return true;}

}
